package hub.nishat.net.model.VO.HR;

import java.sql.SQLException;

import java.text.ParseException;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import view.nishat.net.Helper.ADFUtil;
import view.nishat.net.Helper.CommonUtil;
import view.nishat.net.Helper.Constants;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 22 11:47:38 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VO_LeaveReportHRRowImpl
  extends ViewRowImpl
{
  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
   */
  public enum AttributesEnum
  {
    LeaveType
    {
      public Object get(VO_LeaveReportHRRowImpl obj)
      {
        return obj.getLeaveType();
      }

      public void put(VO_LeaveReportHRRowImpl obj, Object value)
      {
        obj.setLeaveType((String)value);
      }
    }
    ,
    UserId
    {
      public Object get(VO_LeaveReportHRRowImpl obj)
      {
        return obj.getUserId();
      }

      public void put(VO_LeaveReportHRRowImpl obj, Object value)
      {
        obj.setUserId((String)value);
      }
    }
    ,
    TotalAvailable
    {
      public Object get(VO_LeaveReportHRRowImpl obj)
      {
        return obj.getTotalAvailable();
      }

      public void put(VO_LeaveReportHRRowImpl obj, Object value)
      {
        obj.setTotalAvailable((Number)value);
      }
    }
    ,
    TotalAvailed
    {
      public Object get(VO_LeaveReportHRRowImpl obj)
      {
        return obj.getTotalAvailed();
      }

      public void put(VO_LeaveReportHRRowImpl obj, Object value)
      {
        obj.setTotalAvailed((Number)value);
      }
    }
    ,
    Remaining
    {
      public Object get(VO_LeaveReportHRRowImpl obj)
      {
        return obj.getRemaining();
      }

      public void put(VO_LeaveReportHRRowImpl obj, Object value)
      {
        obj.setRemaining((String)value);
      }
    }
    ,
    Unpaid
    {
      public Object get(VO_LeaveReportHRRowImpl obj)
      {
        return obj.getUnpaid();
      }

      public void put(VO_LeaveReportHRRowImpl obj, Object value)
      {
        obj.setUnpaid((String)value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static final int firstIndex = 0;

    public abstract Object get(VO_LeaveReportHRRowImpl object);

    public abstract void put(VO_LeaveReportHRRowImpl object, Object value);

    public int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static final int firstIndex()
    {
      return firstIndex;
    }

    public static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static final AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }


  private int currLeaveType = 0;
  float totalAvailable = 0;
  oracle.jbo.domain.Number totalAvailableNumber = null;
  public static final int LEAVETYPE = AttributesEnum.LeaveType.index();
  public static final int USERID = AttributesEnum.UserId.index();
  public static final int TOTALAVAILABLE = AttributesEnum.TotalAvailable.index();
  public static final int TOTALAVAILED = AttributesEnum.TotalAvailed.index();
  public static final int REMAINING = AttributesEnum.Remaining.index();
  public static final int UNPAID = AttributesEnum.Unpaid.index();

  /**
   * This is the default constructor (do not remove).
   */
  public VO_LeaveReportHRRowImpl()
  {
    Row selectedRow =
        (Row)ADFUtil.evaluateEL("#{bindings.VO_ActiveEmployees4Iterator.currentRow}"); // get the current selected row
    String userId = selectedRow.getAttribute("ChildPersonId").toString();
    CommonUtil.createUserSession(Constants.SESSION_SELECTED_EMP_ID, userId);
  }

  /**
   * Gets the attribute value for the calculated attribute LeaveType.
   * @return the LeaveType
   */
  public String getLeaveType()
  {
    currLeaveType = Integer.parseInt((String)getAttributeInternal(LEAVETYPE));
    switch (currLeaveType)
    {
      case 1:
        return "CASUAL";
      case 2:
        return "ANNUAL";
      case 5:
        return "SHORT";
      case 6:
        return "LATES";
      default:
        return "";
    }
  }

  /**
   * Sets <code>value</code> as the attribute value for the calculated attribute LeaveType.
   * @param value value to set the  LeaveType
   */
  public void setLeaveType(String value)
  {
    setAttributeInternal(LEAVETYPE, value);
  }

  /**
   * Gets the attribute value for the calculated attribute UserId.
   * @return the UserId
   */
  public String getUserId()
  {
    return (String) getAttributeInternal(USERID);
  }

  /**
   * Sets <code>value</code> as the attribute value for the calculated attribute UserId.
   * @param value value to set the  UserId
   */
  public void setUserId(String value)
  {
    setAttributeInternal(USERID, value);
  }

  /**
   * Gets the attribute value for the calculated attribute TotalAvailable.
   * @return the TotalAvailable
   */
  public Number getTotalAvailable()
  {
    totalAvailable = getAttributeInternal(TOTALAVAILABLE)==null?0:Float.parseFloat(getAttributeInternal(TOTALAVAILABLE).toString());
    //return (Number) getAttributeInternal(TOTALAVAILABLE);
    try
    {
      totalAvailableNumber = new oracle.jbo.domain.Number(CommonUtil.round(CommonUtil.getLeavesTillDate(totalAvailable,CommonUtil.getSessionValue(Constants.SESSION_SELECTED_EMP_ID).toString()),2));
    }
    catch (ParseException e)
    {
    }
    catch (SQLException e)
    {
    }
    return totalAvailableNumber;
  }

  /**
   * Sets <code>value</code> as the attribute value for the calculated attribute TotalAvailable.
   * @param value value to set the  TotalAvailable
   */
  public void setTotalAvailable(Number value)
  {
    setAttributeInternal(TOTALAVAILABLE, value);
  }

  /**
   * Gets the attribute value for the calculated attribute TotalAvailed.
   * @return the TotalAvailed
   */
  public Number getTotalAvailed()
  {
    return (Number) getAttributeInternal(TOTALAVAILED);
  }

  /**
   * Sets <code>value</code> as the attribute value for the calculated attribute TotalAvailed.
   * @param value value to set the  TotalAvailed
   */
  public void setTotalAvailed(Number value)
  {
    setAttributeInternal(TOTALAVAILED, value);
  }

  /**
   * Gets the attribute value for the calculated attribute Remaining.
   * @return the Remaining
   */
  public String getRemaining()
  {
    //return (String) getAttributeInternal(REMAINING);
    double totalAvailable =
       Double.parseDouble(totalAvailableNumber.toString());
    double totalAvailed = getAttributeInternal(TOTALAVAILED)==null?0:Double.parseDouble(getAttributeInternal(TOTALAVAILED).toString());
    if (totalAvailable == 0) return "0";
    double remaining = CommonUtil.round((totalAvailable - totalAvailed),2);
    return remaining+"";
  }

  /**
   * Sets <code>value</code> as the attribute value for the calculated attribute Remaining.
   * @param value value to set the  Remaining
   */
  public void setRemaining(String value)
  {
    setAttributeInternal(REMAINING, value);
  }

  /**
   * Gets the attribute value for the calculated attribute Unpaid.
   * @return the Unpaid
   */
  public String getUnpaid()
  {
    double totalAvailed = getAttributeInternal(TOTALAVAILED)==null?0:Double.parseDouble(getAttributeInternal(TOTALAVAILED).toString());
    double totalAvailable = getAttributeInternal(TOTALAVAILABLE)==null?0:Double.parseDouble(getAttributeInternal(TOTALAVAILABLE).toString());
    double unpaid = totalAvailed-totalAvailable;
    CommonUtil.log("TotalAvailable = "+totalAvailable);
    CommonUtil.log("TotalAvailed = "+totalAvailed);
    CommonUtil.log("Unpaid = "+unpaid);
    return unpaid>0?unpaid+"":"0";
    //return (String) getAttributeInternal(UNPAID);
  }

  /**
   * Sets <code>value</code> as the attribute value for the calculated attribute Unpaid.
   * @param value value to set the  Unpaid
   */
  public void setUnpaid(String value)
  {
    setAttributeInternal(UNPAID, value);
  }

  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
  protected Object getAttrInvokeAccessor(int index,
                                         AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * setAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param value the value to assign to the attribute
   * @param attrDef the attribute

   * @throws Exception
   */
  protected void setAttrInvokeAccessor(int index, Object value,
                                       AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }
}
